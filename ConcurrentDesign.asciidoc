Concurrent Design
=================
Erik Søe Sørensen <eriksoe@gmail.com>

== Designing with processes ==
[cols="2", width="100%"]
|==================
| So I'm going to design an Erlang application.
 How many processes should I have, and which?
| Just as for the question "how many objects should I have", there are
  many possible answers, ...

| I've heard that processes are Erlang's equivalent of objects.
  Is that true?  It sounds a bit wasteful to me.
| In principle, you could take an OOP system and make each object into
  a separate process -- but that would be a bad idea for a lot of
  reasons (performance, memory consumption, maintainability,
  debuggability, wrong use of a tool).

  Everything may be an object, but it takes something to qualify for
  being a process.

//  (That being said, Erlang processes appears to match quite nicely with Alan
//  Kay's original idea of OOP.)
//  TODO: Fact-check this ^^

| OK -- I did think it sounded too simple to be good practise.

  Out of curiousity: If I came by an application written in such a
  fashion -- if only partly -- how would I be able to detect it?
| The tell-tale signs of that approach -- beside the abundance of
  processes, of course -- would probably be that many processes had a
  small, fixed state, and that most of the communication between
  processes would be synchronous.

//  Processes which neither allow the system do more things
//  simultaneously (work at independent rates) nor serve to separate
//  responsibilities (be changed independently, or have different
//  lifetimes) typically do not add much.

  Processes should typically by their existence contribute with either
  concurrency, clarity of code, ownership of resources, or uniformity
  of interfaces.

| I've also heard that Erlang is great for parallel computations,
  because you can cheaply create a new process whenever there's an
  opportunity for doing two things in parallel. How about that?

| That's another extreme.  Don't do that either.
  It's like saying in OOP that whenever you can use inheritance for
  reusing code, you should.

  Creating a process is cheap compared to other languages, but there's
  still a cost -- and communicating inputs and results between
  processes introduces some overhead. So first of all, don't do it for
  too small tasks.

  And like any other performance optimization which costs in code clarity,
  don't do it prematurely. Do it only when you've measured that it
  might be a good idea -- and only where your measurements show
  that it might be worth it. And remember to measure afterwards that
  the result is in fact a speedup which outweighs the extra
  complexity.

| Okay, enough about extremes; people say so much (especially straw men).

  Returning to my question of which processes to have: +
  You mentioned certain valid /raison d'être/s of processes --
  concurrency, clarity of code, ownership of resources, and uniformity
  of interfaces?

  Could you elaborate on these?
| Certainly... +
  The common theme is separation of concerns.
// and matching data and process life spans?

  To take the most concrete first: Some processes are centered around a
  certain resource; this can be either some data (in normal term form
  or contained in a table) or a port (file, socket or connection to
  non-Erlang program).
// ownership vs. controlling access

(TODO)

| When can concurrency be a reason for a process to exist?
| Using processes for getting concurrency can be done for
  getting I/O concurrency, CPU concurrency, or scalability.

// For I/O concurrency: often comes naturally, with ownership of e.g. sockets.
// For CPU concurrency: is often a conscious choice. Make sure it's well-founded, especially if it adds complexity.
//  (i.e., parallel computation)
// For scalability: also a conscious choice. A responsibility is split among several processes; it can be by sharding of some data space (e.g. a table) or more symmetric (e.g., several acceptors on one socket).

(TODO)
// clarity of code is probably the most important, but it is often
// combined with one of the other reasons.
// The overarching, unifying reason is actually "separation of concerns".

|==================


//////////
"How Many Processes Should I Have?"
Many answers (as for "how many objects should I have"):
- One per concurrent activity.
- One per story (e.g., session)
- One per resource: file (or group of strongly related files); socket;
  table/data; conceptual stateful object
- One per (major) object with lifespan
Primary answer:
- The passive ones: One per resource.
- The active ones: One per natural concurrent activity.

Kinds of processes:
- Resource holders - file; socket; table/data; session state
  - These are the primary ones.
- Adapters/proxies (modifies *what is sent*)
- Distributors/repeaters/publishers (modifies *to whom* it is sent)
- Process -- i.e. task with independent lifespan
  - These are the other primary ones.
- Decision taker?
- Supervisors
Like in OOP: there are many kinds of objects.

Some questions:
- What state will you need to keep around -- and for how long?
  Is its lifetime bound to that of some task?
- How busy would each candidate process likely be?
  Which collaborators would it have?
  Which resources would it own?
- Are there singletons?
  Are the singletons necessary?
  Are the singletons too busy -- and could the workload be split up?
  (measure!)

Why parallel map isn't usually done:
- Erlang is not for doing something fast, it's for doing the right
  thing (making the right decisions) fast enough.
- There is a limit (to number of processes), after all.

Just as in OOP, it may turn out that it is best to split or merge processes
compared with the original design.
- Split if one process talks to too many (i.e., has to handle input from too many different sources), or does too many unrelated things
- Merge if two processes turn out to have to act in lockstep anyway -- and work too hard to keep in sync


Reasons for refactoring, introducing extra objects, reassigning
responsibilities, etc.:
- OOP: to improve flexibility (extensibility), to simplify
- Erlang: Same, plus to improve scalability or consistency; to
  simplify or robustify process interactions (often, error handling)

//////////
