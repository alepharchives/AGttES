Concurrent Design Revisited
===========================
Erik Søe Sørensen <eriksoe@gmail.com>

[cols="2", width="100%"]
|==================
| I've been had!

  I was told that programming with concurrency in Erlang was simple and safe --
  that the days of race conditions were over.

  But guess what?  My Erlang program just went and misbehaved -- I have
  processes hanging around which ought to have stopped, and sometimes
  things happens out of order!

| Who told you that now?

  While Erlang does give you certain guarantees and a quite
  well-thought-through set of building blocks for concurrent
  programming, it doesn't solve all of your problems -- a bit of
  thought and careful design is still required.


| But that's rubbish!  I chose Erlang specifically for avoiding to
  deal with race conditions.
| And for a lot of things, you don't.

  What Erlang does is to raise the threshold of when you have to worry
  and begin to think, so that --
  by not having to deal with low-level stuff like issues related to
  shared state, and doing inter-process signalling and processing
  correctly and efficiently, and doing asynchronous communication
  without drowning in complexity, and cleaning up
  properly when things go wrong --
  you can focus on the concurrency problems that actually relate to
  what you're trying to do.

| So no silver bullet?
| Nope.  You can easily have race conditions in Erlang.

  But the good news is that such race conditions will only involve
  actual and explicit inter-process activities. Processes only
  communicate when they intend to, and not accidentally through shared
  mutable state.

  That brings down the number of sources of potential race conditions
  _a lot_.

| Okay, so the potential problems and causes are only where I might
  expect them to be.  I guess that's an improvement.

  (I had programmed multi-threaded Java applications for a few years before I learned of the Java Memory Model (http://www.cs.umd.edu/~pugh/java/memoryModel/jsr133.pdf; http://java.dzone.com/articles/multithreading-and-java-memory). +
  Apparently you can't assume anything unless it is explicitly guaranteed.
| Apparently not.
  You need to know your building blocks -- doubly so when concurrency
  is in the picture.

|==================

== Getting Process Interaction Right ==
[cols="2", width="100%"]
|==================
| But, how then to attack the problem of avoiding race conditions?

|
|==================

//////////
Avoiding/precluding race conditions:
- During design, or during debugging/bugfixing.
- You can only prove the absense of the kinds of errors that you're aware of -- only what you look for.  Cannot assume invariants not actively sought.
- Be aware of which guarantees you're given. (JVM-MM reference?)
  - Example: linked processes die together - but only when Reason/=normal.
  - Example: send-receive message ordering guarantee.

Race example:
- client wanting to keep track of some object's state.
//////////