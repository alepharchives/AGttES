How to program with style if you haven't got class
==================================================
Erik Søe Sørensen <eriksoe@gmail.com>

[cols="2", width="100%"]
|==================
| I've got this class which I have to implement in Erlang...
| I'm sure it's a nice class :-)

| But Erlang doesn't have a ``class'' concept! What am I to do? How do I implement it in Erlang?
| It depends. What kind of class is it?

| What kinds are there? I'm used to a uniform class concept.
| It may not be as uniform as you think.

| Sure it is. The keyword `class', then a class name, a curly opening brace, then a bunch of definitions... and then a closing brace.
| Semantics matter more than syntax. The syntactic similarities may hide significant semantic differences.

| Such as?
| For instance, some classes are thread-safe, while others are not.
Only some classes are serializable; only some are immutable. And a few are singletons.

For some classes, object identity matters, for others it doesn't.
And only some classes are genuinely designed for inheritance.

Finally, a mutable object may be shared, or there may be just a single reference to it.

| And these differences matter?
| Even under normal circumstances, they matter to some degree.
In a concurrent and possibly distributed setting, they matter a great deal.

| So, what properties determine how I can best represent a concept in Erlang?
| First and foremost: immutability. Does the object have mutable state, or does it contain the same information throughout its lifetime? Numbers, Java strings, and read-only collections are examples of immutable objects.

| OK, let's take an example: the text-book ``Point'' class. Immutable version first -- how would you represent a Point with translation and scaling operations?
a|
Immutable objects are represented as terms. Operations on those objects are represented as functions. A Point, for instance, could be represented as a pair -- a 2-tuple +{X,Y}+:

----------
make_point(X, Y) -> {X,Y}.
scale(T, {X,Y}) -> {T*X, T*Y}.
translate({DX,DY}, {X,Y}) -> {X+DX, Y+DY}.
x_part({X,_}) -> X.
y_part({_,Y}) -> Y.
----------

| And in case I want a mutable version?
| That depends.  Will it need object identity?

Or will it be referred to by multiple entities, so that if one of them modifies the Point, that change will be visible by the others?

| Let's say that it's a ``no'' to both those questions, for the time being.
| Then we can just use the same immutable Point implementation.
Instead of modifying the Point object, we can replace it with a
derived version, and no-one can tell the difference.

| And if I need object identity?
a|
A simple way is to use `make_ref()` to generate a unique ID, and
re-use that in the derived versions:

----------
make_point(X, Y) -> {make_ref(), X,Y}.
scale(T, {ID,X,Y}) -> {ID, T*X, T*Y}.
translate({DX,DY}, {ID,X,Y}) -> {ID, X+DX, Y+DY}.
x_part({_,X,_}) -> X.
y_part({_,_,Y}) -> Y.
same({ID1,_,_}, {ID2,_,_}) -> ID1 =:= ID2.
----------

| And for a mutable object which is known by more than one entity?
Shared state, you might call it.
| Then we need a level of indirection. [TODO]
// Possibilities: A process; an ETS row.

|==================

